{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghisl\\\\Desktop\\\\p12\\\\dev_tableau_de_bord_avec_react\\\\src\\\\components\\\\DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { getUserData, getUserActivity, getUserAverageSession, getUserPerformance } from './services/apiService';\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../data.js'; // Ajustez le chemin d'importation selon votre structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [userId, setUserId] = useState(12);\n  const [useMockData, setUseMockData] = useState(false);\n\n  // Fonction pour changer de source de données\n  const toggleDataSource = () => {\n    setUseMockData(!useMockData);\n  };\n\n  // Récupérer les données utilisateur soit de l'API soit des données mockées\n  const fetchUserData = async () => {\n    if (useMockData) {\n      return USER_MAIN_DATA.find(user => user.id === userId);\n    } else {\n      return await getUserData(userId);\n    }\n  };\n\n  // Ajoutez des fonctions similaires pour les autres types de données si nécessaire\n  // Exemple pour les performances\n  const fetchUserPerformance = async () => {\n    if (useMockData) {\n      const data = USER_PERFORMANCE.find(perf => perf.userId === userId);\n      return data ? data.data : [];\n    } else {\n      return await getUserPerformance(userId);\n    }\n  };\n  const contextValue = {\n    userId,\n    setUserId,\n    toggleDataSource,\n    fetchUserData,\n    fetchUserPerformance\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(DataProvider, \"D7OBMvsTwzSwCpwf9WvuxHKqYjw=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  return useContext(DataContext);\n};\n_s2(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","getUserData","getUserActivity","getUserAverageSession","getUserPerformance","USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","userId","setUserId","useMockData","setUseMockData","toggleDataSource","fetchUserData","find","user","id","fetchUserPerformance","data","perf","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","$RefreshReg$"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/components/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { getUserData, getUserActivity, getUserAverageSession, getUserPerformance } from './services/apiService';\r\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../data.js';  // Ajustez le chemin d'importation selon votre structure\r\n\r\nconst DataContext = createContext();\r\n\r\nexport const DataProvider = ({ children }) => {\r\n    const [userId, setUserId] = useState(12);\r\n    const [useMockData, setUseMockData] = useState(false);\r\n\r\n    // Fonction pour changer de source de données\r\n    const toggleDataSource = () => {\r\n        setUseMockData(!useMockData);\r\n    };\r\n\r\n    // Récupérer les données utilisateur soit de l'API soit des données mockées\r\n    const fetchUserData = async () => {\r\n        if (useMockData) {\r\n            return USER_MAIN_DATA.find(user => user.id === userId);\r\n        } else {\r\n            return await getUserData(userId);\r\n        }\r\n    };\r\n\r\n    // Ajoutez des fonctions similaires pour les autres types de données si nécessaire\r\n    // Exemple pour les performances\r\n    const fetchUserPerformance = async () => {\r\n        if (useMockData) {\r\n            const data = USER_PERFORMANCE.find(perf => perf.userId === userId);\r\n            return data ? data.data : [];\r\n        } else {\r\n            return await getUserPerformance(userId);\r\n        }\r\n    };\r\n\r\n    const contextValue = {\r\n        userId,\r\n        setUserId,\r\n        toggleDataSource,\r\n        fetchUserData,\r\n        fetchUserPerformance\r\n    };\r\n\r\n    return (\r\n        <DataContext.Provider value={contextValue}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useData = () => useContext(DataContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,WAAW,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,kBAAkB,QAAQ,uBAAuB;AAC/G,SAASC,cAAc,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,gBAAgB,QAAQ,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtG,MAAMC,WAAW,gBAAGb,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMc,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMmB,gBAAgB,GAAGA,CAAA,KAAM;IAC3BD,cAAc,CAAC,CAACD,WAAW,CAAC;EAChC,CAAC;;EAED;EACA,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIH,WAAW,EAAE;MACb,OAAOZ,cAAc,CAACgB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAAC;IAC1D,CAAC,MAAM;MACH,OAAO,MAAMd,WAAW,CAACc,MAAM,CAAC;IACpC;EACJ,CAAC;;EAED;EACA;EACA,MAAMS,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIP,WAAW,EAAE;MACb,MAAMQ,IAAI,GAAGjB,gBAAgB,CAACa,IAAI,CAACK,IAAI,IAAIA,IAAI,CAACX,MAAM,KAAKA,MAAM,CAAC;MAClE,OAAOU,IAAI,GAAGA,IAAI,CAACA,IAAI,GAAG,EAAE;IAChC,CAAC,MAAM;MACH,OAAO,MAAMrB,kBAAkB,CAACW,MAAM,CAAC;IAC3C;EACJ,CAAC;EAED,MAAMY,YAAY,GAAG;IACjBZ,MAAM;IACNC,SAAS;IACTG,gBAAgB;IAChBC,aAAa;IACbI;EACJ,CAAC;EAED,oBACId,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAd,QAAA,EACrCA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACnB,EAAA,CA1CWF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA4CzB,OAAO,MAAMuB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrC,UAAU,CAACY,WAAW,CAAC;AAAA;AAACyB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}