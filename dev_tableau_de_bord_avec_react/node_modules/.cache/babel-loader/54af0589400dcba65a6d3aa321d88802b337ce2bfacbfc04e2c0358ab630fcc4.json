{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghisl\\\\Desktop\\\\p12\\\\dev_tableau_de_bord_avec_react\\\\src\\\\components\\\\ScorePieChart.js\",\n  _s = $RefreshSig$();\n// src/components/ScorePieChart.js\nimport React, { useState, useEffect } from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';\nimport { getUserData } from '../services/apiService';\n\n// Component affiche un graphique circulaire représentant le score d'un utilisateur\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScorePieChart = ({\n  userId\n}) => {\n  _s();\n  const [userScore, setUserScore] = useState(null);\n\n  // Récupérer les données de l'utilisateur à partir de l'API au chargement du composant\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getUserData(userId);\n        // Vérifier si 'todayScore' ou 'score' est disponible et le stocker\n        const score = data.todayScore || data.score;\n        if (score) {\n          setUserScore(score);\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du score de l'utilisateur\", error);\n      }\n    };\n    fetchData();\n  }, [userId]);\n\n  // Préparer les données pour le PieChart\n  const scorePercentage = userScore * 100;\n  const data = [{\n    name: 'Score',\n    value: scorePercentage,\n    fill: '#FF0000'\n  }, {\n    name: 'Reste',\n    value: 100 - scorePercentage,\n    fill: 'transparent'\n  }];\n\n  // Afficher un message de chargement tant que les données ne sont pas chargées\n  if (userScore === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Chargement du score...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 250,\n    children: /*#__PURE__*/_jsxDEV(PieChart, {\n      children: [/*#__PURE__*/_jsxDEV(Pie, {\n        data: data,\n        cx: \"50%\",\n        cy: \"50%\",\n        startAngle: 90,\n        endAngle: 270 // Inverser le sens de remplissage\n        ,\n        innerRadius: \"60%\",\n        outerRadius: \"80%\",\n        paddingAngle: 5,\n        dataKey: \"value\",\n        cornerRadius: 10,\n        blendStroke: true,\n        children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: entry.fill\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"50%\",\n        y: \"50%\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"central\",\n        className: \"chart-number\",\n        children: `${Math.round(scorePercentage)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"50%\",\n        y: \"60%\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"central\",\n        className: \"chart-label\",\n        children: \"de votre objectif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ScorePieChart, \"BADDWPluGATa+0b9jGxDHI8QAg8=\");\n_c = ScorePieChart;\nexport default ScorePieChart;\nvar _c;\n$RefreshReg$(_c, \"ScorePieChart\");","map":{"version":3,"names":["React","useState","useEffect","PieChart","Pie","Cell","ResponsiveContainer","getUserData","jsxDEV","_jsxDEV","ScorePieChart","userId","_s","userScore","setUserScore","fetchData","data","score","todayScore","error","console","scorePercentage","name","value","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","cx","cy","startAngle","endAngle","innerRadius","outerRadius","paddingAngle","dataKey","cornerRadius","blendStroke","map","entry","index","x","y","textAnchor","dominantBaseline","className","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/components/ScorePieChart.js"],"sourcesContent":["// src/components/ScorePieChart.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer} from 'recharts';\r\nimport { getUserData } from '../services/apiService';\r\n\r\n// Component affiche un graphique circulaire représentant le score d'un utilisateur\r\nconst ScorePieChart = ({ userId }) => {\r\n  const [userScore, setUserScore] = useState(null);\r\n\r\n  // Récupérer les données de l'utilisateur à partir de l'API au chargement du composant\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getUserData(userId);\r\n        // Vérifier si 'todayScore' ou 'score' est disponible et le stocker\r\n        const score = data.todayScore || data.score;\r\n        if (score) {\r\n          setUserScore(score);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération du score de l'utilisateur\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  // Préparer les données pour le PieChart\r\n  const scorePercentage = userScore * 100;\r\n  const data = [\r\n    { name: 'Score', value: scorePercentage, fill: '#FF0000' },\r\n    { name: 'Reste', value: 100 - scorePercentage, fill: 'transparent' }\r\n  ];\r\n\r\n  // Afficher un message de chargement tant que les données ne sont pas chargées\r\n  if (userScore === null) {\r\n    return <div>Chargement du score...</div>;\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={250}>\r\n      <PieChart>\r\n        <Pie\r\n            data={data}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            startAngle={90}\r\n            endAngle={270} // Inverser le sens de remplissage\r\n            innerRadius=\"60%\"\r\n            outerRadius=\"80%\"\r\n            paddingAngle={5}\r\n            dataKey=\"value\"\r\n            cornerRadius={10}\r\n            blendStroke\r\n        >\r\n        {data.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={entry.fill} />\r\n            ))}\r\n        </Pie>\r\n            {/* Utilisation de deux éléments Text pour le retour à la ligne */}\r\n            <text x=\"50%\" y=\"50%\" textAnchor=\"middle\" dominantBaseline=\"central\" className=\"chart-number\">\r\n                {`${Math.round(scorePercentage)}%`}\r\n            </text>\r\n            <text x=\"50%\" y=\"60%\" textAnchor=\"middle\" dominantBaseline=\"central\" className=\"chart-label\">\r\n                de votre objectif\r\n            </text>\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default ScorePieChart;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAEC,mBAAmB,QAAO,UAAU;AAClE,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMT,WAAW,CAACI,MAAM,CAAC;QACtC;QACA,MAAMM,KAAK,GAAGD,IAAI,CAACE,UAAU,IAAIF,IAAI,CAACC,KAAK;QAC3C,IAAIA,KAAK,EAAE;UACTH,YAAY,CAACG,KAAK,CAAC;QACrB;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;MAClF;IACF,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMU,eAAe,GAAGR,SAAS,GAAG,GAAG;EACvC,MAAMG,IAAI,GAAG,CACX;IAAEM,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAEF,eAAe;IAAEG,IAAI,EAAE;EAAU,CAAC,EAC1D;IAAEF,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,GAAG,GAAGF,eAAe;IAAEG,IAAI,EAAE;EAAc,CAAC,CACrE;;EAED;EACA,IAAIX,SAAS,KAAK,IAAI,EAAE;IACtB,oBAAOJ,OAAA;MAAAgB,QAAA,EAAK;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC1C;EAEA,oBACEpB,OAAA,CAACH,mBAAmB;IAACwB,KAAK,EAAC,MAAM;IAACC,MAAM,EAAE,GAAI;IAAAN,QAAA,eAC5ChB,OAAA,CAACN,QAAQ;MAAAsB,QAAA,gBACPhB,OAAA,CAACL,GAAG;QACAY,IAAI,EAAEA,IAAK;QACXgB,EAAE,EAAC,KAAK;QACRC,EAAE,EAAC,KAAK;QACRC,UAAU,EAAE,EAAG;QACfC,QAAQ,EAAE,GAAI,CAAC;QAAA;QACfC,WAAW,EAAC,KAAK;QACjBC,WAAW,EAAC,KAAK;QACjBC,YAAY,EAAE,CAAE;QAChBC,OAAO,EAAC,OAAO;QACfC,YAAY,EAAE,EAAG;QACjBC,WAAW;QAAAhB,QAAA,EAEdT,IAAI,CAAC0B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACnBnC,OAAA,CAACJ,IAAI;UAAuBmB,IAAI,EAAEmB,KAAK,CAACnB;QAAK,GAAjC,QAAOoB,KAAM,EAAC;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAqB,CAC9C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEFpB,OAAA;QAAMoC,CAAC,EAAC,KAAK;QAACC,CAAC,EAAC,KAAK;QAACC,UAAU,EAAC,QAAQ;QAACC,gBAAgB,EAAC,SAAS;QAACC,SAAS,EAAC,cAAc;QAAAxB,QAAA,EACvF,GAAEyB,IAAI,CAACC,KAAK,CAAC9B,eAAe,CAAE;MAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACPpB,OAAA;QAAMoC,CAAC,EAAC,KAAK;QAACC,CAAC,EAAC,KAAK;QAACC,UAAU,EAAC,QAAQ;QAACC,gBAAgB,EAAC,SAAS;QAACC,SAAS,EAAC,aAAa;QAAAxB,QAAA,EAAC;MAE7F;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAE1B,CAAC;AAACjB,EAAA,CA/DIF,aAAa;AAAA0C,EAAA,GAAb1C,aAAa;AAiEnB,eAAeA,aAAa;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}