{"ast":null,"code":"import axios from 'axios';\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../data.js';\nconst API_URL = 'http://localhost:3000/user/';\nlet useMockData = false; // Variable pour contrôler l'utilisation des données mockées\n\n// Exposez une méthode pour basculer l'utilisation des données mockées\nexport const toggleMockDataUsage = () => {\n  useMockData = !useMockData;\n};\n\n// Fonction pour obtenir les données d'un utilisateur\nexport const getUserData = async userId => {\n  if (useMockData) {\n    const userData = USER_MAIN_DATA.find(user => user.id === userId);\n    return {\n      data: userData || {}\n    };\n  }\n  try {\n    const response = await axios.get(`${API_URL}${userId}`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    // Gérer l'erreur ici\n    console.error(\"Erreur lors de la récuparation des données de l'utilisateur!\", error);\n  }\n};\n\n// Fonction pour obtenir les données d'activité d'un utilisateur\nexport const getUserActivity = async userId => {\n  if (useMockData) {\n    const activity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    return {\n      data: activity ? activity.sessions : []\n    };\n  }\n  try {\n    // Utiliser userId pour construire l'URL\n    const response = await axios.get(`${API_URL}${userId}/activity`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données d'activité\", error);\n  }\n};\n\n// Fonction pour obtenir les données de temps de session d'un utilisateur\nexport const getUserAverageSession = async userId => {\n  if (useMockData) {\n    const sessionData = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    return {\n      data: sessionData ? sessionData.sessions : []\n    };\n  }\n  try {\n    // Utiliser userId pour construire l'URL\n    const response = await axios.get(`${API_URL}${userId}/average-sessions`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données de temps de session\", error);\n  }\n};\n\n// Fonction pour obtenir les données de performances d'un utilisateur\nexport const getUserPerformance = async userId => {\n  if (useMockData) {\n    const performance = USER_PERFORMANCE.find(perf => perf.userId === userId);\n    return {\n      performanceData: performance ? performance.data : [],\n      kind: performance ? performance.kind : {}\n    };\n  }\n  try {\n    // Utiliser userId pour construire l'URL\n    const response = await axios.get(`${API_URL}${userId}/performance`);\n    console.log(response.data);\n    return {\n      performanceData: response.data.data.data,\n      kind: response.data.data.kind\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données de performance\", error);\n  }\n};","map":{"version":3,"names":["axios","USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","API_URL","useMockData","toggleMockDataUsage","getUserData","userId","userData","find","user","id","data","response","get","console","log","error","getUserActivity","activity","sessions","getUserAverageSession","sessionData","session","getUserPerformance","performance","perf","performanceData","kind"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../data.js';\r\n\r\nconst API_URL = 'http://localhost:3000/user/';\r\nlet useMockData = false; // Variable pour contrôler l'utilisation des données mockées\r\n\r\n// Exposez une méthode pour basculer l'utilisation des données mockées\r\nexport const toggleMockDataUsage = () => {\r\n  useMockData = !useMockData;\r\n};\r\n\r\n// Fonction pour obtenir les données d'un utilisateur\r\nexport const getUserData = async (userId) => {\r\n  if (useMockData) {\r\n    const userData = USER_MAIN_DATA.find(user => user.id === userId);\r\n    return { data: userData || {} };\r\n  }\r\n  try {\r\n    const response = await axios.get(`${API_URL}${userId}`);\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Gérer l'erreur ici\r\n    console.error(\"Erreur lors de la récuparation des données de l'utilisateur!\", error);\r\n  }\r\n};\r\n\r\n// Fonction pour obtenir les données d'activité d'un utilisateur\r\nexport const getUserActivity = async (userId) => {\r\n  if (useMockData) {\r\n    const activity = USER_ACTIVITY.find(activity => activity.userId === userId);\r\n    return { data: activity ? activity.sessions : [] };\r\n  }\r\n  try {\r\n    // Utiliser userId pour construire l'URL\r\n    const response = await axios.get(`${API_URL}${userId}/activity`);\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données d'activité\", error);\r\n  }\r\n};\r\n\r\n// Fonction pour obtenir les données de temps de session d'un utilisateur\r\nexport const getUserAverageSession = async (userId) => {\r\n  if (useMockData) {\r\n    const sessionData = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\r\n    return { data: sessionData ? sessionData.sessions : [] };\r\n  }\r\n  try {\r\n    // Utiliser userId pour construire l'URL\r\n    const response = await axios.get(`${API_URL}${userId}/average-sessions`);\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données de temps de session\", error);\r\n  }\r\n};\r\n\r\n// Fonction pour obtenir les données de performances d'un utilisateur\r\nexport const getUserPerformance = async (userId) => {\r\n  if (useMockData) {\r\n    const performance = USER_PERFORMANCE.find(perf => perf.userId === userId);\r\n    return { performanceData: performance ? performance.data : [], kind: performance ? performance.kind : {} };\r\n  }\r\n  try {\r\n    // Utiliser userId pour construire l'URL\r\n    const response = await axios.get(`${API_URL}${userId}/performance`);\r\n    console.log(response.data);\r\n    return { performanceData: response.data.data.data, kind: response.data.data.kind };\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données de performance\", error);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}