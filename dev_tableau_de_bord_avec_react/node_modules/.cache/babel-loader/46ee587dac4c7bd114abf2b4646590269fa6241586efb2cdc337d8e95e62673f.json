{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghisl\\\\Desktop\\\\p12\\\\dev_tableau_de_bord_avec_react\\\\src\\\\components\\\\DailyActivityChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from 'recharts';\nimport CustomTooltip from './CustomTooltip';\nimport { getUserActivity } from '../services/apiService';\n\n// Assumez que 'userId' est passé en prop au composant pour récupérer les données spécifiques à cet utilisateur\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DailyActivityChart = ({\n  userId\n}) => {\n  _s();\n  const [activityData, setActivityData] = useState(null);\n  useEffect(() => {\n    const fetchActivityData = async () => {\n      try {\n        const {\n          data\n        } = await getUserActivity();\n        // Vérifiez ici que la structure des données est celle que vous attendez\n        if (data.sessions) {\n          setActivityData(data.sessions);\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données d'activité\", error);\n      }\n    };\n    fetchActivityData();\n  }, []);\n\n  // Gestion de l'affichage lorsque les données sont en cours de chargement ou ne sont pas disponibles\n  if (!activityData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Aucune donn\\xE9e d'activit\\xE9 disponible\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }, this);\n  }\n\n  // Assurez-vous que cette transformation correspond à la structure de vos données\n  const formattedData = activityData.map(session => ({\n    ...session,\n    day: new Date(session.day).getDate() // Assurez-vous que cela correspond à votre structure de données\n  }));\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: formattedData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\",\n        orientation: \"left\",\n        domain: ['dataMin - 1', 'dataMax + 1']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\",\n        domain: ['dataMin - 50', 'dataMax + 50']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"left\",\n        dataKey: \"kilogram\",\n        fill: \"#5550bd\",\n        name: \"Poids (kg)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"right\",\n        dataKey: \"calories\",\n        fill: \"#ff0000\",\n        name: \"Calories br\\xFBl\\xE9es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: /*#__PURE__*/_jsxDEV(CustomTooltip, {\n          type: \"dailyActivity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this),\n        className: \"daily-tooltip\",\n        cursor: {\n          fill: 'transparent'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n};\n_s(DailyActivityChart, \"SSzB0MG5st1SzebhJZ35hFnrbHk=\");\n_c = DailyActivityChart;\nexport default DailyActivityChart;\nvar _c;\n$RefreshReg$(_c, \"DailyActivityChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","ResponsiveContainer","Tooltip","CustomTooltip","getUserActivity","jsxDEV","_jsxDEV","DailyActivityChart","userId","_s","activityData","setActivityData","fetchActivityData","data","sessions","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","formattedData","map","session","day","Date","getDate","width","height","strokeDasharray","dataKey","yAxisId","orientation","domain","fill","name","content","type","className","cursor","_c","$RefreshReg$"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/components/DailyActivityChart.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport CustomTooltip from './CustomTooltip';\r\nimport { getUserActivity } from '../services/apiService';\r\n\r\n// Assumez que 'userId' est passé en prop au composant pour récupérer les données spécifiques à cet utilisateur\r\nconst DailyActivityChart = ({ userId }) => {\r\n  const [activityData, setActivityData] = useState(null);\r\n\r\n  useEffect(() => {\r\n      const fetchActivityData = async () => {\r\n          try {\r\n              const { data } = await getUserActivity();\r\n              // Vérifiez ici que la structure des données est celle que vous attendez\r\n              if (data.sessions) {\r\n                  setActivityData(data.sessions);\r\n              }\r\n          } catch (error) {\r\n              console.error(\"Erreur lors de la récupération des données d'activité\", error);\r\n          }\r\n      };\r\n\r\n          fetchActivityData();\r\n  }, []);\r\n\r\n  // Gestion de l'affichage lorsque les données sont en cours de chargement ou ne sont pas disponibles\r\n  if (!activityData) {\r\n      return <div>Aucune donnée d'activité disponible</div>;\r\n  }\r\n\r\n  // Assurez-vous que cette transformation correspond à la structure de vos données\r\n  const formattedData = activityData.map(session => ({\r\n      ...session,\r\n      day: new Date(session.day).getDate(), // Assurez-vous que cela correspond à votre structure de données\r\n  }));\r\n  \r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={formattedData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"day\" />\r\n          <YAxis yAxisId=\"left\" orientation=\"left\" domain={['dataMin - 1', 'dataMax + 1']} />\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['dataMin - 50', 'dataMax + 50']} />\r\n          <Bar yAxisId=\"left\" dataKey=\"kilogram\" fill=\"#5550bd\" name=\"Poids (kg)\" />\r\n          <Bar yAxisId=\"right\" dataKey=\"calories\" fill=\"#ff0000\" name=\"Calories brûlées\" />\r\n          <Tooltip content={<CustomTooltip type=\"dailyActivity\"/>} className=\"daily-tooltip\" cursor={{fill: 'transparent'}} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n  \r\n  export default DailyActivityChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}