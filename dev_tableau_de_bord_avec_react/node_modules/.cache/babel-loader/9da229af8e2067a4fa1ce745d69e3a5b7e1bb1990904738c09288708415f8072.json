{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghisl\\\\Desktop\\\\p12\\\\dev_tableau_de_bord_avec_react\\\\src\\\\components\\\\PerformanceChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer } from 'recharts';\nimport { getUserPerformance } from '../services/apiService';\n\n// Traduction des labels de performance en français\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst labelsFrench = {\n  cardio: 'Cardio',\n  energy: 'Énergie',\n  endurance: 'Endurance',\n  strength: 'Force',\n  speed: 'Vitesse',\n  intensity: 'Intensité'\n};\n\n// Composant graphique de type radar affichant les performances de l'utilisateur\nconst PerformanceChart = ({\n  userId\n}) => {\n  _s();\n  const [performanceData, setPerformanceData] = useState([]);\n\n  // Chargement des données de performance lors du montage ou de la mise à jour de userId\n  useEffect(() => {\n    const fetchPerformanceData = async () => {\n      try {\n        // Récupération des données de performance depuis le serveur\n        const {\n          data,\n          kind\n        } = await getUserPerformance(userId);\n        console.log(\"Raw Performance Data:\", data);\n        console.log(\"Performance Kind Mapping:\", kind);\n        if (data && kind) {\n          // Mise en forme des données pour le graphique radar\n          const validatedData = data.map(item => {\n            if (!kind[item.kind]) {\n              console.error(\"Invalid kind index found:\", item.kind);\n              return null; // ou gérer autrement\n            }\n            return {\n              // Conversion des labels en français\n              subject: labelsFrench[kind[item.kind]],\n              // Valeur de la performance\n              A: item.value,\n              // Valeur maximale pour chaque axe du radar\n              fullMark: 200\n            };\n          }).filter(item => item !== null);\n          // Mise à jour de l'état avec les données formatées\n          console.log(\"Formatted Performance Data:\", validatedData);\n          setPerformanceData(validatedData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching performance data:\", error);\n      }\n    };\n    fetchPerformanceData();\n  }, [userId]);\n\n  // Structure du composant RadarChart\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"performance-chart-bloc\",\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      className: 'performance-charts-container',\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(RadarChart, {\n        cx: \"50%\",\n        cy: \"50%\",\n        outerRadius: \"70%\",\n        data: performanceData,\n        children: [/*#__PURE__*/_jsxDEV(PolarGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n          dataKey: \"subject\",\n          tick: {\n            fill: '#FFFFFF',\n            fontSize: \"0.60vw\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PolarRadiusAxis, {\n          angle: 30,\n          domain: [0, 200],\n          tick: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Radar, {\n          name: \"Performance\",\n          dataKey: \"A\",\n          stroke: \"#E60000\",\n          fill: \"#E60000\",\n          fillOpacity: 0.7\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(PerformanceChart, \"W5HtXhwMP4QKIIQg63Bm2kB7eZA=\");\n_c = PerformanceChart;\nexport default PerformanceChart;\nvar _c;\n$RefreshReg$(_c, \"PerformanceChart\");","map":{"version":3,"names":["React","useState","useEffect","Radar","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","ResponsiveContainer","getUserPerformance","jsxDEV","_jsxDEV","labelsFrench","cardio","energy","endurance","strength","speed","intensity","PerformanceChart","userId","_s","performanceData","setPerformanceData","fetchPerformanceData","data","kind","console","log","validatedData","map","item","error","subject","A","value","fullMark","filter","className","children","width","height","cx","cy","outerRadius","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","tick","fill","fontSize","angle","domain","name","stroke","fillOpacity","_c","$RefreshReg$"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/components/PerformanceChart.js"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer} from 'recharts';\r\nimport { getUserPerformance } from '../services/apiService';\r\n\r\n// Traduction des labels de performance en français\r\nconst labelsFrench = {\r\n  cardio: 'Cardio',\r\n  energy: 'Énergie',\r\n  endurance: 'Endurance',\r\n  strength: 'Force',\r\n  speed: 'Vitesse',\r\n  intensity: 'Intensité'\r\n};\r\n\r\n// Composant graphique de type radar affichant les performances de l'utilisateur\r\nconst PerformanceChart = ({ userId }) => {\r\n  const [performanceData, setPerformanceData] = useState([]);\r\n\r\n  // Chargement des données de performance lors du montage ou de la mise à jour de userId\r\n  useEffect(() => {\r\n    const fetchPerformanceData = async () => {\r\n      try {\r\n      // Récupération des données de performance depuis le serveur\r\n      const { data, kind } = await getUserPerformance(userId);\r\n      console.log(\"Raw Performance Data:\", data);\r\n      console.log(\"Performance Kind Mapping:\", kind);\r\n      if (data && kind) {\r\n        // Mise en forme des données pour le graphique radar\r\n        const validatedData = data.map(item => {\r\n          if (!kind[item.kind]) {\r\n            console.error(\"Invalid kind index found:\", item.kind);\r\n            return null;  // ou gérer autrement\r\n          }\r\n          return {\r\n          // Conversion des labels en français\r\n          subject: labelsFrench[kind[item.kind]],\r\n          // Valeur de la performance\r\n          A: item.value,\r\n          // Valeur maximale pour chaque axe du radar\r\n          fullMark: 200\r\n        };\r\n      }).filter(item => item !== null);\r\n        // Mise à jour de l'état avec les données formatées\r\n        console.log(\"Formatted Performance Data:\", validatedData);\r\n        setPerformanceData(validatedData);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching performance data:\", error);\r\n    }\r\n  };\r\n\r\n  fetchPerformanceData();\r\n}, [userId]);\r\n\r\n  // Structure du composant RadarChart\r\n  return (\r\n    <div className='performance-chart-bloc'>\r\n      <ResponsiveContainer className={'performance-charts-container'} width=\"100%\" height=\"100%\">\r\n        {/* Composant principal qui dessine un graphique radar */}\r\n        <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"70%\" data={performanceData}>\r\n          {/* Grille polaire pour améliorer la lisibilité du radar */}\r\n          <PolarGrid />\r\n          {/* Configure les axes angulaires du graphique radar*/}\r\n          <PolarAngleAxis dataKey=\"subject\" tick={{ fill: '#FFFFFF', fontSize: \"0.60vw\"}} />\r\n          {/* Définit les axes radiaux et leurs domaines*/}\r\n          <PolarRadiusAxis angle={30} domain={[0, 200]} tick={false} />\r\n          {/* Représente les données sous forme de radar */}\r\n          <Radar name=\"Performance\" dataKey=\"A\" stroke=\"#E60000\" fill=\"#E60000\" fillOpacity={0.7} />\r\n        </RadarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}