{"ast":null,"code":"import axios from 'axios';\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../data.js';\nconst API_URL = 'http://localhost:3000/user/';\n\n// Indicateur pour utiliser les données mockées au lieu de celles du serveur.\nlet useMockData = false;\n\n/**\r\n * Bascule l'utilisation des données entre réelles et mockées et retourne l'état actuel du mode mock pour vérification.\r\n * @returns {boolean} L'état actuel du mode mock.\r\n */\nexport const toggleMockDataUsage = () => {\n  useMockData = !useMockData;\n  // Retourne l'état actuel pour l'utiliser dans l'interface utilisateur\n  return useMockData;\n};\n\n/**\r\n * Obtient l'état actuel de l'utilisation des données mockées.\r\n * @returns {boolean} État de l'utilisation des données mockées.\r\n */\nexport const getMockDataStatus = () => {\n  // Retourne l'état actuel des données mockées\n  return useMockData;\n};\n\n/**\r\n * Récupère les données d'un utilisateur spécifique.\r\n * @param {number} userId - L'identifiant de l'utilisateur.\r\n * @returns {Promise<Object>} Les données de l'utilisateur.\r\n */\nexport const getUserData = async userId => {\n  // Si les données sont mockées\n  if (useMockData) {\n    const userData = USER_MAIN_DATA.find(user => user.id === userId);\n    console.log('données mockées', {\n      data: userData || {}\n    });\n    return {\n      data: userData || {}\n    };\n  }\n  try {\n    // Tente de récupérer les données utilisateur depuis l'API en utilisant l'identifiant fourni.\n    const response = await axios.get(`${API_URL}${userId}`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erreur lors de la récuparation des données de l'utilisateur!\", error);\n  }\n};\n\n/**\r\n * Récupère les données d'activité d'un utilisateur et retourne un objet contenant un tableau des sessions.\r\n * @param {number} userId - L'identifiant de l'utilisateur pour récupérer ses données d'activité.\r\n * @returns {Promise<Object>} Les données d'activité de l'utilisateur.\r\n */\nexport const getUserActivity = async userId => {\n  // Si les données sont mockées\n  if (useMockData) {\n    const activity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    console.log('données mockées', {\n      data: {\n        sessions: activity ? activity.sessions : []\n      }\n    });\n    return {\n      data: {\n        sessions: activity ? activity.sessions : []\n      }\n    };\n  }\n  try {\n    // Récupère les données d'activité de l'utilisateur depuis l'API et les affiche dans la console.\n    const response = await axios.get(`${API_URL}${userId}/activity`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données d'activité\", error);\n  }\n};\n\n/**\r\n * Récupère les données des sessions moyennes d'un utilisateur.\r\n * @param {number} userId - L'identifiant de l'utilisateur.\r\n * @returns {Promise<Object>} Les sessions moyennes de l'utilisateur.\r\n */\nexport const getUserAverageSession = async userId => {\n  // Si les données sont mockées\n  if (useMockData) {\n    const sessionData = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    console.log('données mockées', {\n      data: {\n        sessions: sessionData ? sessionData.sessions : []\n      }\n    });\n    return {\n      data: {\n        sessions: sessionData ? sessionData.sessions : []\n      }\n    };\n  }\n  try {\n    // Fait une requête à l'API pour obtenir les sessions moyennes de l'utilisateur.\n    const response = await axios.get(`${API_URL}${userId}/average-sessions`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données de temps de session\", error);\n  }\n};\n\n/**\r\n * Récupère les données de performance d'un utilisateur.\r\n * @param {number} userId - L'identifiant de l'utilisateur pour récupérer ses données de performance.\r\n * @returns {Promise<Object>} Les données de performance de l'utilisateur.\r\n */\nexport const getUserPerformance = async userId => {\n  // Si les données sont mockées\n  if (useMockData) {\n    const performance = USER_PERFORMANCE.find(perf => perf.userId === userId);\n    return {\n      data: performance ? performance.data : [],\n      kind: performance ? performance.kind : {}\n    };\n  }\n  try {\n    // Effectue une requête pour obtenir les performances.\n    const response = await axios.get(`${API_URL}${userId}/performance`);\n    console.log(response.data);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données de performance\", error);\n  }\n};","map":{"version":3,"names":["axios","USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","API_URL","useMockData","toggleMockDataUsage","getMockDataStatus","getUserData","userId","userData","find","user","id","console","log","data","response","get","error","getUserActivity","activity","sessions","getUserAverageSession","sessionData","session","getUserPerformance","performance","perf","kind"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../data.js';\r\n\r\nconst API_URL = 'http://localhost:3000/user/';\r\n\r\n// Indicateur pour utiliser les données mockées au lieu de celles du serveur.\r\nlet useMockData = false;\r\n\r\n/**\r\n * Bascule l'utilisation des données entre réelles et mockées et retourne l'état actuel du mode mock pour vérification.\r\n * @returns {boolean} L'état actuel du mode mock.\r\n */\r\nexport const toggleMockDataUsage = () => {\r\n  useMockData = !useMockData;\r\n  // Retourne l'état actuel pour l'utiliser dans l'interface utilisateur\r\n  return useMockData;\r\n};\r\n\r\n/**\r\n * Obtient l'état actuel de l'utilisation des données mockées.\r\n * @returns {boolean} État de l'utilisation des données mockées.\r\n */\r\nexport const getMockDataStatus = () => {\r\n  // Retourne l'état actuel des données mockées\r\n  return useMockData; \r\n};\r\n\r\n/**\r\n * Récupère les données d'un utilisateur spécifique.\r\n * @param {number} userId - L'identifiant de l'utilisateur.\r\n * @returns {Promise<Object>} Les données de l'utilisateur.\r\n */\r\nexport const getUserData = async (userId) => {\r\n  // Si les données sont mockées\r\n  if (useMockData) {\r\n    const userData = USER_MAIN_DATA.find(user => user.id === userId);\r\n    console.log('données mockées', { data: userData || {} })\r\n    return { data: userData || {} };\r\n  }\r\n  try {\r\n    // Tente de récupérer les données utilisateur depuis l'API en utilisant l'identifiant fourni.\r\n    const response = await axios.get(`${API_URL}${userId}`);\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récuparation des données de l'utilisateur!\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère les données d'activité d'un utilisateur et retourne un objet contenant un tableau des sessions.\r\n * @param {number} userId - L'identifiant de l'utilisateur pour récupérer ses données d'activité.\r\n * @returns {Promise<Object>} Les données d'activité de l'utilisateur.\r\n */\r\nexport const getUserActivity = async (userId) => {\r\n  // Si les données sont mockées\r\n  if (useMockData) {\r\n    const activity = USER_ACTIVITY.find(activity => activity.userId === userId);\r\n    console.log('données mockées', { data: { sessions: activity ? activity.sessions : [] } })\r\n    return { data: { sessions: activity ? activity.sessions : [] } };\r\n  }\r\n  try {\r\n    // Récupère les données d'activité de l'utilisateur depuis l'API et les affiche dans la console.\r\n    const response = await axios.get(`${API_URL}${userId}/activity`);\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données d'activité\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère les données des sessions moyennes d'un utilisateur.\r\n * @param {number} userId - L'identifiant de l'utilisateur.\r\n * @returns {Promise<Object>} Les sessions moyennes de l'utilisateur.\r\n */\r\nexport const getUserAverageSession = async (userId) => {\r\n  // Si les données sont mockées\r\n  if (useMockData) {\r\n    const sessionData = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\r\n    console.log('données mockées', { data: { sessions: sessionData ? sessionData.sessions : [] } })\r\n    return { data: { sessions: sessionData ? sessionData.sessions : [] } };\r\n  }\r\n  try {\r\n    // Fait une requête à l'API pour obtenir les sessions moyennes de l'utilisateur.\r\n    const response = await axios.get(`${API_URL}${userId}/average-sessions`);\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données de temps de session\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère les données de performance d'un utilisateur.\r\n * @param {number} userId - L'identifiant de l'utilisateur pour récupérer ses données de performance.\r\n * @returns {Promise<Object>} Les données de performance de l'utilisateur.\r\n */\r\nexport const getUserPerformance = async (userId) => {\r\n  // Si les données sont mockées\r\n  if (useMockData) {\r\n    const performance = USER_PERFORMANCE.find(perf => perf.userId === userId);\r\n    return { data: performance ? performance.data : [], kind: performance ? performance.kind : {} };\r\n  }\r\n  try {\r\n    // Effectue une requête pour obtenir les performances.\r\n    const response = await axios.get(`${API_URL}${userId}/performance`);\r\n    console.log(response.data);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données de performance\", error);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}