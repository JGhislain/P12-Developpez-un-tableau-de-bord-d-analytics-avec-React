{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghisl\\\\Desktop\\\\p12\\\\dev_tableau_de_bord_avec_react\\\\src\\\\components\\\\DailyActivityChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from 'recharts';\nimport { getUserActivity } from '../services/apiService';\nimport CustomTooltip from './CustomTooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DailyActivityChart = ({\n  userId\n}) => {\n  _s();\n  const [activityData, setActivityData] = useState([]);\n\n  // Effet pour récupérer l'activité quotidienne de l'utilisateur dès que le composant est monté ou que userId change\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getUserActivity(userId);\n      if (result && result.sessions) {\n        // Formater les données si nécessaire, par exemple, pour extraire le jour du mois\n        const formattedData = result.sessions.map(session => ({\n          ...session,\n          day: session.day.split('-')[2] // Prendre en compte le format de votre date\n        }));\n        setActivityData(formattedData);\n      }\n    };\n    fetchData();\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: activityData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"left\",\n        orientation: \"left\",\n        domain: ['dataMin - 1', 'dataMax + 1']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        yAxisId: \"right\",\n        orientation: \"right\",\n        domain: ['dataMin - 50', 'dataMax + 50']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"left\",\n        dataKey: \"kilogram\",\n        fill: \"#5550bd\",\n        name: \"Poids (kg)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        yAxisId: \"right\",\n        dataKey: \"calories\",\n        fill: \"#ff0000\",\n        name: \"Calories br\\xFBl\\xE9es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: /*#__PURE__*/_jsxDEV(CustomTooltip, {\n          type: \"dailyActivity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this),\n        className: \"daily-tooltip\",\n        cursor: {\n          fill: 'transparent'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n};\n_s(DailyActivityChart, \"Qc5IpcC4vhcEOdc2tcJS7hO22yI=\");\n_c = DailyActivityChart;\nexport default DailyActivityChart;\nvar _c;\n$RefreshReg$(_c, \"DailyActivityChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","ResponsiveContainer","Tooltip","getUserActivity","CustomTooltip","jsxDEV","_jsxDEV","DailyActivityChart","userId","_s","activityData","setActivityData","fetchData","result","sessions","formattedData","map","session","day","split","width","height","children","data","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","yAxisId","orientation","domain","fill","name","content","type","className","cursor","_c","$RefreshReg$"],"sources":["C:/Users/ghisl/Desktop/p12/dev_tableau_de_bord_avec_react/src/components/DailyActivityChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { getUserActivity } from '../services/apiService';\r\nimport CustomTooltip from './CustomTooltip';\r\n\r\nconst DailyActivityChart = ({ userId }) => {\r\n  const [activityData, setActivityData] = useState([]);\r\n\r\n  // Effet pour récupérer l'activité quotidienne de l'utilisateur dès que le composant est monté ou que userId change\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await getUserActivity(userId);\r\n      if (result && result.sessions) {\r\n        // Formater les données si nécessaire, par exemple, pour extraire le jour du mois\r\n        const formattedData = result.sessions.map(session => ({\r\n          ...session,\r\n          day: session.day.split('-')[2] // Prendre en compte le format de votre date\r\n        }));\r\n        setActivityData(formattedData);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [userId]);\r\n  \r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={activityData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"day\" />\r\n          <YAxis yAxisId=\"left\" orientation=\"left\" domain={['dataMin - 1', 'dataMax + 1']} />\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['dataMin - 50', 'dataMax + 50']} />\r\n          <Bar yAxisId=\"left\" dataKey=\"kilogram\" fill=\"#5550bd\" name=\"Poids (kg)\" />\r\n          <Bar yAxisId=\"right\" dataKey=\"calories\" fill=\"#ff0000\" name=\"Calories brûlées\" />\r\n          <Tooltip content={<CustomTooltip type=\"dailyActivity\"/>} className=\"daily-tooltip\" cursor={{fill: 'transparent'}} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  };\r\n  \r\n  export default DailyActivityChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}